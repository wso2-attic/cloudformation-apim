AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - KeyPairName
          - AWSAccessKeySecret
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
      - Label:
          default: Database Configuration
        Parameters:
          - DBUsername
          - DBPassword
    ParameterLabels:
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      CertificateName:
        default: Which certificate should be used at the Load Balancer for APIM?
      DBUsername:
        default: APIM Database Master username?
      DBPassword:
        default: APIM Database Master password
Resources:
  WSO2AM1SIMPLE1VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      CidrBlock: 10.0.252.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  PublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn: WSO2AMVPCGatewayAttachment
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref PublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  WSO2AMVPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref PublicInternetGateway
      VpcId: !Ref WSO2AM1SIMPLE1VPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
  WSO2AMSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
  WSO2AMAnalyticsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2AM1SIMPLE1VPC
      GroupDescription: WSO2 API Manager Analytics Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '7612'
          ToPort: '7612'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '7712'
          ToPort: '7712'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
  WSO2AMLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu140464bit
      InstanceType: t2.medium
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ProductSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - set -e
            - mkdir -p /mnt/efs
            - !Join
              - ''
              - - echo "
                - !Ref AMNFSMount
                - .efs.
                - !Ref 'AWS::Region'
                - .amazonaws.com
                - >-
                  :/ /mnt/efs nfs4
                  nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
                  0 0" >> /etc/fstab
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2AMELB
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/hieradata/dev/wso2/wso2am_runtime/pattern-1/default.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Address
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - mount -a -t nfs4
            - export DB_NAME=WSO2AM_DB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Address
            - !Join
              - ''
              - - export DB_PORT=
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Port
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - echo "Waiting for Cluster lock..."
            - bash /usr/local/bin/acquire_lock.sh
            - export FACTER_product_name=wso2am_runtime
            - export FACTER_product_version=2.1.0
            - export FACTER_product_profile=default
            - export FACTER_vm_type=openstack
            - export FACTER_environment=dev
            - export FACTER_platform=default
            - export FACTER_use_hieradata=true
            - export FACTER_pattern=pattern-1
            - >-
              puppet apply -e "include wso2am_runtime"
              --modulepath=/etc/puppet/modules
              --hiera_config=/etc/puppet/hiera.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_apim.sh
            - bash /usr/local/bin/provision_db_apim.sh
            - echo "Releasing lock..."
            - /usr/local/bin/sync_lock apim unlock
            - 'if [ ! -d "/mnt/efs/synapse-configs" ]; then'
            - '    mkdir -p /mnt/efs/synapse-configs'
            - '    cp -r /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs /mnt/efs/synapse-configs'
            - fi
            - >-
              rm -rf
              /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs
            - >-
              ln -s /mnt/efs/synapse-configs/synapse-configs
              /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs
            - apt-get --purge remove puppet mysql-client -y
            - rm -rf /etc/puppet
            - /mnt/wso2am-2.1.0/bin/wso2server.sh start
            - echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
            - cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - ProductSecurityGroup
      - WSO2AMELB
      - WSO2AMVPCGatewayAttachment
  WSO2AMELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '9763'
          InstancePort: '9763'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames:
            - LBStickyPolicy
        - LoadBalancerPort: '9443'
          InstancePort: '9443'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
        - LoadBalancerPort: '8243'
          InstancePort: '8243'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      HealthCheck:
          Target: 'TCP:9763'
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '10'
          Timeout: '5'
  WSO2AMDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref ProductSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: wso2amdb
      DBName: WSO2AM_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref RDSDBSG412ZQ
  RDSDBSG412ZQ:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
  AMNFSMount:
    Type: 'AWS::EFS::FileSystem'
    Properties: {}
  EFSMtSN1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PublicSubnet
      FileSystemId: !Ref AMNFSMount
      SecurityGroups:
        - !Ref ProductSecurityGroup
  EFSMtSN2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref PublicSubnet2
      FileSystemId: !Ref AMNFSMount
      SecurityGroups:
        - !Ref ProductSecurityGroup
  WSO2AMAnalyticsASGSN1:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2AMAnalyticsLC
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LoadBalancerNames:
        - !Ref WSO2AMAnalyticsELB
        - !Ref WSO2AMAnalyticsELBThriftSN1
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: WSO2AM-Analytics-Instance
          PropagateAtLaunch: 'true'
        - Key: Product
          Value: WSO2AM-Analytics
          PropagateAtLaunch: 'true'
        - Key: Version
          Value: 2.1.0
          PropagateAtLaunch: 'true'
        - Key: Cluster
          Value: WSO2AMAnalytics210SIMPLE
          PropagateAtLaunch: 'true'
    DependsOn:
      - WSO2AMAnalyticsLC
      - WSO2AMAnalyticsELB
  WSO2AMAnalyticsASGSN2:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2AMAnalyticsLC
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      LoadBalancerNames:
        - !Ref WSO2AMAnalyticsELB
        - !Ref WSO2AMAnalyticsELBThriftSN2
      VPCZoneIdentifier:
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: WSO2AM-Analytics-Instance
          PropagateAtLaunch: 'true'
        - Key: Product
          Value: WSO2AM-Analytics
          PropagateAtLaunch: 'true'
        - Key: Version
          Value: 2.1.0
          PropagateAtLaunch: 'true'
        - Key: Cluster
          Value: WSO2AMAnalytics210SIMPLE
          PropagateAtLaunch: 'true'
    DependsOn:
      - WSO2AMAnalyticsLC
      - WSO2AMAnalyticsELB
  WSO2AMAnalyticsLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - AWSAnalyticsAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu140464bit
      InstanceType: t2.medium
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref ProductSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - set -e
            - mkdir -p /mnt/efs
            - !Join
              - ''
              - - echo "
                - !Ref AMNFSMount
                - .efs.
                - !Ref 'AWS::Region'
                - .amazonaws.com
                - >-
                  :/ /mnt/efs nfs4
                  nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2
                  0 0" >> /etc/fstab
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2AMELB
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/hieradata/dev/wso2/wso2am_runtime/pattern-1/default.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Address
                - /g" /etc/puppet/hieradata/dev/wso2/common.yaml
            - mount -a -t nfs4
            - export DB_NAME=WSO2AM_DB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Address
            - !Join
              - ''
              - - export DB_PORT=
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Port
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - echo "Waiting for Cluster lock..."
            - bash /usr/local/bin/acquire_lock.sh
            - export FACTER_product_name=wso2am_runtime
            - export FACTER_product_version=2.1.0
            - export FACTER_product_profile=default
            - export FACTER_vm_type=openstack
            - export FACTER_environment=dev
            - export FACTER_platform=default
            - export FACTER_use_hieradata=true
            - export FACTER_pattern=pattern-1
            - >-
              puppet apply -e "include wso2am_runtime"
              --modulepath=/etc/puppet/modules
              --hiera_config=/etc/puppet/hiera.yaml
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2AMDB
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_apim.sh
            - bash /usr/local/bin/provision_db_apim.sh
            - echo "Releasing lock..."
            - /usr/local/bin/sync_lock apim unlock
            - 'if [ ! -d "/mnt/efs/synapse-configs" ]; then'
            - '    mkdir -p /mnt/efs/synapse-configs'
            - '    cp -r /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs /mnt/efs/synapse-configs'
            - fi
            - >-
              rm -rf
              /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs
            - >-
              ln -s /mnt/efs/synapse-configs/synapse-configs
              /mnt/wso2am-2.1.0/repository/deployment/server/synapse-configs
            - apt-get --purge remove puppet mysql-client -y
            - rm -rf /etc/puppet
            - /mnt/wso2am-2.1.0/bin/wso2server.sh start
            - echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
            - cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - ProductSecurityGroup
      - WSO2AMAnalyticsELB
      - WSO2AMVPCGatewayAttachment
  WSO2AMAnalyticsELBThriftSN1:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref ProductSecurityGroup
      Subnets:
        - !Ref PublicSubnet
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '7611'
          InstancePort: '7611'
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: '7711'
          InstancePort: '7711'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: 'TCP:9763'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
    DependsOn:
      - ProductSecurityGroup
  WSO2AMAnalyticsELBThriftSN2:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref ProductSecurityGroup
      Subnets:
        - !Ref PublicSubnet2
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '7611'
          InstancePort: '7611'
          Protocol: TCP
          InstanceProtocol: TCP
        - LoadBalancerPort: '7711'
          InstancePort: '7711'
          Protocol: TCP
          InstanceProtocol: TCP
      HealthCheck:
        Target: 'TCP:9763'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
    DependsOn:
      - ProductSecurityGroup
Outputs:
  Publisher:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2AMELB
          - DNSName
        - ':9443/publisher'
    Description: WSO2 API Manager Publisher URL.
  Store:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2AMELB
          - DNSName
        - ':9443/store'
    Description: WSO2 API Manager Store URL.
  Carbon:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2AMELB
          - DNSName
        - ':9443/carbon'
    Description: WSO2 API Manager Console URL.
  Credentials:
    Value: !Join
      - ''
      - - 'Username: admin, '
        - 'Password: admin'
    Description: >-
      WSO2 API Manager Admin Credentials. Please refer
      https://docs.wso2.com/display/AM210/Maintaining+Logins+and+passwords to
      change credentials.
Parameters:
  KeyPairName:
    Description: >-
      The key pair to establish a SSH connection to the web servers. This should
      be already created.
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A previously uploaded certificate to use at the Load Balancer Listeners.
    Type: String
    MinLength: 1
  DBUsername:
    Description: The username to be used in the WSO2 AM DB.
    Type: String
    Default: root
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Description: The password to be used in the WSO2 AM DB.
    Type: String
    Default: rootrootroot
    MinLength: 8
    NoEcho: true
Conditions: {}
Mappings:
  AWSAMIRegionMap:
    ap-northeast-1:
      Ubuntu140464bit: ami-2e63924f
    ap-northeast-2:
      Ubuntu140464bit: ami-979258f9
    ap-south-1:
      Ubuntu140464bit: ami-4a90fa25
    ap-southeast-1:
      Ubuntu140464bit: ami-ea2bf989
    ap-southeast-2:
      Ubuntu140464bit: ami-396a415a
    eu-central-1:
      Ubuntu140464bit: ami-4bd03b24
    eu-west-1:
      Ubuntu140464bit: ami-02b62c71
    eu-west-2:
      Ubuntu140464bit: ami-63342007
    us-east-1:
      Ubuntu140464bit: ami-a9e2a9bf
    us-east-2:
      Ubuntu140464bit: ami-151d3b70
    us-west-1:
      Ubuntu140464bit: ami-992661f9
    us-west-2:
      Ubuntu140464bit: ami-42569022
    ca-central-1:
      Ubuntu140464bit: ami-beea56da
    sa-east-1:
      Ubuntu140464bit: ami-8df695e1
  AWSAnalyticsAMIRegionMap:
    ap-northeast-1:
      Ubuntu140464bit: ami-2e63924f
    ap-northeast-2:
      Ubuntu140464bit: ami-979258f9
    ap-south-1:
      Ubuntu140464bit: ami-4a90fa25
    ap-southeast-1:
      Ubuntu140464bit: ami-ea2bf989
    ap-southeast-2:
      Ubuntu140464bit: ami-396a415a
    eu-central-1:
      Ubuntu140464bit: ami-4bd03b24
    eu-west-1:
      Ubuntu140464bit: ami-02b62c71
    eu-west-2:
      Ubuntu140464bit: ami-63342007
    us-east-1:
      Ubuntu140464bit: ami-a9e2a9bf
    us-east-2:
      Ubuntu140464bit: ami-151d3b70
    us-west-1:
      Ubuntu140464bit: ami-992661f9
    us-west-2:
      Ubuntu140464bit: ami-42569022
    ca-central-1:
      Ubuntu140464bit: ami-beea56da
    sa-east-1:
      Ubuntu140464bit: ami-8df695e1
